generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id              String         @id(map: "users_pkey") @default(cuid())
  name            String?
  image           String?
  billing_address Json?
  payment_method  Json?
  updatedAt       DateTime?      @db.Timestamptz(6)
  createdAt       DateTime       @default(now())
  email           String         @unique
  emailVerified   DateTime?
  accounts        account[]
  sessions        session[]
  workspaces      workspace[]
  collaborators   collaborator[]
  folders         folder[]
  files           file[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum WorkspaceType {
  private
  shared
}

model workspace {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  workspaceOwnerId String
  workspaceOwner   user           @relation(fields: [workspaceOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title            String
  iconId           String?
  data             String?
  inTrash          Boolean
  logo             String?
  bannerUrl        String?
  type             WorkspaceType  @default(private)
  files            file[]
  folders          folder[]
  collaborators    collaborator[]
}

model collaborator {
  id          String    @id @default(cuid())
  userId      String
  user        user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String
  workspace   workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())

  @@index([userId, workspaceId])
}

model folder {
  id               String    @id @default(cuid())
  workspaceId      String
  workspaceOwnerId String
  workspaceOwner   user      @relation(fields: [workspaceOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title            String
  iconId           String?
  data             String?
  inTrash          Boolean
  bannerUrl        String?
  files            file[]
  workspace        workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model file {
  id               String    @id @default(cuid())
  workspaceId      String
  workspaceOwnerId String
  wokrspaceOwner   user      @relation(fields: [workspaceOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title            String
  iconId           String?
  data             String?
  inTrash          Boolean
  bannerUrl        String?
  folderId         String
  folder           folder    @relation(fields: [folderId], references: [id])
  workspace        workspace @relation(fields: [workspaceId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model customer {
  id                 String  @id(map: "customers_pkey") @db.Uuid
  stripe_customer_id String?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model price {
  id                String                 @id(map: "prices_pkey")
  product_id        String?
  active            Boolean?
  description       String?
  unit_amount       BigInt?
  currency          String?
  type              pricing_type?
  interval          pricing_plan_interval?
  interval_count    Int?
  trial_period_days Int?
  metadata          Json?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product {
  id          String   @id(map: "products_pkey")
  active      Boolean?
  name        String?
  description String?
  image       String?
  metadata    Json?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscription {
  id                   String               @id(map: "subscriptions_pkey")
  user_id              String               @db.Uuid
  status               subscription_status?
  metadata             Json?
  price_id             String?
  quantity             Int?
  cancel_at_period_end Boolean?
  created              DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  current_period_start DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  current_period_end   DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  ended_at             DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  cancel_at            DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  canceled_at          DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  trial_start          DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  trial_end            DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

enum pricing_plan_interval {
  day
  week
  month
  year
}

enum pricing_type {
  one_time
  recurring
}

enum subscription_status {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
}
