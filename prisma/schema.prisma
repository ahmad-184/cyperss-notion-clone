generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String    @id(map: "users_pkey") @default(cuid()) @db.Uuid
    full_name       String?
    avatar_url      String?
    billing_address Json?
    payment_method  Json?
    updatedAt       DateTime? @db.Timestamptz(6)
    email           String?
}

model Workspace {
    id               String   @id @default(cuid())
    created_at       DateTime @default(now())
    workspaceOwnerId String
    title            String
    iconId           String?
    data             String?
    inTrash          Boolean
    logo             String?
    bannerUrl        String?
    files            File[]
    folders          Folder[]
}

model Folder {
    id               String    @id @default(cuid())
    workspaceId      String
    workspaceOwnerId String
    title            String
    iconId           String?
    data             String?
    inTrash          Boolean
    bannerUrl        String?
    files            File[]
    workspace        Workspace @relation(fields: [workspaceId], references: [id])
    created_at       DateTime  @default(now())
    updated_at       DateTime  @updatedAt
}

model File {
    id               String    @id @default(cuid())
    workspaceId      String
    workspaceOwnerId String
    title            String
    iconId           String?
    data             String?
    inTrash          Boolean
    bannerUrl        String?
    folderId         String
    folder           Folder    @relation(fields: [folderId], references: [id])
    workspace        Workspace @relation(fields: [workspaceId], references: [id])
    created_at       DateTime  @default(now())
    updated_at       DateTime  @updatedAt
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Customer {
    id                 String  @id(map: "customers_pkey") @db.Uuid
    stripe_customer_id String?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Price {
    id                String                 @id(map: "prices_pkey")
    product_id        String?
    active            Boolean?
    description       String?
    unit_amount       BigInt?
    currency          String?
    type              pricing_type?
    interval          pricing_plan_interval?
    interval_count    Int?
    trial_period_days Int?
    metadata          Json?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Product {
    id          String   @id(map: "products_pkey")
    active      Boolean?
    name        String?
    description String?
    image       String?
    metadata    Json?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subscription {
    id                   String               @id(map: "subscriptions_pkey")
    user_id              String               @db.Uuid
    status               subscription_status?
    metadata             Json?
    price_id             String?
    quantity             Int?
    cancel_at_period_end Boolean?
    created              DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
    current_period_start DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
    current_period_end   DateTime             @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
    ended_at             DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
    cancel_at            DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
    canceled_at          DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
    trial_start          DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
    trial_end            DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

enum pricing_plan_interval {
    day
    week
    month
    year
}

enum pricing_type {
    one_time
    recurring
}

enum subscription_status {
    trialing
    active
    canceled
    incomplete
    incomplete_expired
    past_due
    unpaid
}
